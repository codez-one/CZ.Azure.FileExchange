# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
  - main

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.x'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.sln
        arguments: --configuration Release
    - task: DotNetCoreCLI@2
      displayName: Publish frontend
      inputs:
        command: 'publish'
        projects: |
          $(workingDirectory)/src/CZ.Azure.FileExchange/
        arguments: --output $(Build.ArtifactStagingDirectory)/fe/ --configuration Release
    - task: DotNetCoreCLI@2
      displayName: Publish api
      inputs:
        command: 'publish'
        projects: |
          $(workingDirectory)/src/CZ.Azure.FileExchange.Api/
        arguments: --output $(Build.ArtifactStagingDirectory)/api/ --configuration Release
    - script: 'az bicep build --file $(workingDirectory)/main.bicep --outfile $(Build.ArtifactStagingDirectory)/azuredeploy.json'
      displayName: build bicep file
    - publish: $(Build.ArtifactStagingDirectory)/
      artifact: drop

- stage: Release
  displayName: Release to github
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:
          steps:
          - task: GitHubRelease@1
            displayName: 'release to github'
            inputs:
              assets: |
                $(Pipeline.Workspace)/drop/**/*.zip
                $(Pipeline.Workspace)/drop/azuredeploy.json
              repositoryName: $(Build.Repository.Name)
              assetUploadMode: replace
              title: "new version"
              gitHubConnection: 'push release'
              action: create
              target: '$(Build.SourceVersion)'
              tagSource: userSpecifiedTag
              tag: $(Build.BuildNumber)
              changeLogCompareToRelease: 'lastFullRelease'
              changeLogType: 'commitBased'